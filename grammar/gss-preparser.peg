{
  var parser, flatten; 

  parser = this;

  String.prototype.trim = String.prototype.trim || function trim() { return this.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); };

  flatten = parser.flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }
}

start
  = (statement)+

statement
  = ccss
  / vfl
  / css

ccss
  = ccss:(char+ _ ccssOp anytoend)  { return ['ccss', parser.flatten(ccss).join("").trim()]; }

ccssOp
  = ">=" / "==" / "<="

vfl
  = vfl:("@-gss-" ("horizontal" / "vertical" / "h" / "v") anytoend)    { return ['vfl', parser.flatten(vfl).join("").trim()]; }


css
  = css:(.)+  {return ['css', css.join("")]}
_
  = (" ")*

__
  = (" ")+

char
  = [a-zA-Z0-9_#.-]

anytoend
  = [^;]* ";" _ LineTerminator*

LineTerminator
  = [\n\r\u2028\u2029]
